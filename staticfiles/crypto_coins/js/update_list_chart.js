let tokenSymbol = null;  // –¢–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let timeFrame;
let timePeriod;
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function clickButton() {
    console.log("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç clickButton");
    const buttons_time = document.querySelectorAll(".token-button");
    buttons_time.forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();  // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ <a>
            tokenSymbol = this.getAttribute("data-symbol");  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            console.log(`üîπ –í—ã–±—Ä–∞–Ω —Ç–æ–∫–µ–Ω: ${tokenSymbol}`);
            saveSelectedToken();
            fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        });
    });
    const buttons_frame = document.querySelectorAll(".frame-button");
    buttons_frame.forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();  // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ <a>
            timeFrame = this.getAttribute("data-frame");  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            console.log(`üîπ –í—ã–±—Ä–∞–Ω frame: ${timeFrame}`);
            saveSelectedFrame()
            fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        });
    });
   
    const buttons_period = document.querySelectorAll(".period-button");
    buttons_period.forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();  // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ <a>
            timePeriod = this.getAttribute("data-period");  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            console.log(`üîπ –í—ã–±—Ä–∞–Ω Period: ${timePeriod}`);
            saveSelectedPeriod()
            fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        });
    });
    fetchData()
    console.log(`üîπ –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${tokenSymbol}`);
    // console.log(`üîπ –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${timeFrame}`);
}
///////////////////clickButton() finish /////////////////////////////////////////////////////////////////////////

////////////////–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Ñ–∞–π–ª–∞/////////////////////////////////////////////////////////////////////////////
// –ñ–¥—ë–º, –ø–æ–∫–∞ DOM –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener("DOMContentLoaded", function () {
    console.log("‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω!");
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ tokenSymbol, timeFrame, timePeriod –≤ localStorage(—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–∞)
    savedToken = localStorage.getItem("selectedToken")
    if (savedToken) {
        tokenSymbol = savedToken;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: ${tokenSymbol}`);
    } else {
        console.log(`‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π`);
        tokenSymbol = "BTC"
    }

    savedFrame = localStorage.getItem("selectedFrame")
    if (savedFrame) {
        timeFrame = savedFrame;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Time-Frame: ${timeFrame}`);
    } else {
        console.log(`‚ö†Ô∏è Time-Frame –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π`);
        timeFrame = 30
    }

    savedPeriod = localStorage.getItem("selectedPeriod")
    if (savedPeriod) {
        timePeriod = savedPeriod;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Time-Period: ${timePeriod}`);
        clickButton()
    } else {
        console.log(`‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π`);
        timePeriod = 24
        clickButton()
    }


    // —á—Ç–æ–±—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã–ª–∞ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞(–µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ, –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ç—å)
    document.body.classList.remove("dark-mode");
    // localStorage.removeItem("selectedToken"); // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ


    // üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞ —Ä–∞–Ω—å—à–µ
    if (localStorage.getItem("theme") === "dark") {
        document.body.classList.add("dark-mode");
    }

    document.getElementById("theme-toggle").addEventListener("click", function () {
        document.body.classList.toggle("dark-mode");
        // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ localStorage
        if (document.body.classList.contains("dark-mode")) {
            localStorage.setItem("theme", "dark");
        } else {
            localStorage.setItem("theme", "light");
        }
    })
});
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
    fetchData();
}, 60000);


function fetchData() {

    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${tokenSymbol}/${timeFrame}/${timePeriod}/`);  // /${timeFrame}
    fetch(`/latest-price-list/${tokenSymbol}/${timeFrame}/${timePeriod}/`)  // ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω   /${timeFrame}
        .then(response => response.json())
        .then(data => {
            console.log(`–î–∞–Ω–Ω—ã–µ = ${data.price_list}`);  // –≤ data –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ price_list(—Ü–µ–Ω—ã –∑–∞ —Å—É—Ç–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É) –∏ last_all_price(–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã)
            const latestData = data.last_all_price;  // –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
            let title = document.querySelector("title");  // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            title.innerText = tokenSymbol

            let coin = document.getElementById("coin");     // favor
            // coin.innerText = data.price_list[0].name
            coin.src = `https://bin.bnbstatic.com/static/assets/logos/${tokenSymbol}.png`

            let favor = document.getElementById("favor");
            favor.innerText = data.price_list[0].name

            let frame = document.getElementById("frame");
            if (frame) {
                frame.innerText = timeFrame < 50 ? timeFrame + " min" : "1 hour"
            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞: Element frame –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            let period = document.getElementById("period");
            period.innerText = timePeriod === 1 ? "1 hour" : timePeriod + "hours"

            let table = document.querySelector("table");  // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table.innerHTML = `
                <tr>
                    <th>Time</th>
                    <th>Price(USD)</th>
                    <th>Change</th>
                </tr>`;  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            
            let token_name = data.price_list[0].name;
            let latest_price = data.price_list[0].price;
            let previous_price = data.price_list[1]?.price || latest_price;  // –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
            let current = document.getElementById("current");
            if (current) {
                if (latestData) {
                    latestData.forEach(token => {
                        if (token.name === token_name) {
                            current.innerText = `Current ${token_name} Price: ${token.price} USD ${(token.dif > 0 ? "‚Üë" : "‚Üì")}`;
                            current.style.color = token.dif > 0 ? "green" : "red";
                        }
                    })
                }

            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞: priceElement –∏–ª–∏ current –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }

            let history = document.getElementById("history-price");
            history.innerText = `${token_name} Price History `

            for (let elem of data.price_list) {
                let row = table.insertRow(-1);  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                row.insertCell(0).innerText = convertISOToLocal(elem.timestamp);  // –í—Ä–µ–º—è
                let priceCell = row.insertCell(1)
                priceCell.innerHTML = elem.price + "  " + elem.direction;  // –¶–µ–Ω–∞ + —Å—Ç—Ä–µ–ª–∫–∞ (HTML)
                let diffCell = row.insertCell(2);
                diffCell.innerText = elem.diff !== null ? elem.diff : "‚Äî";  // –†–∞–∑–Ω–∏—Ü–∞

                if (elem.diff > 0) {
                    priceCell.style.color = "green";
                    diffCell.style.color = "green";  // –ï—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∑–µ–ª—ë–Ω—ã–π

                } else if (elem.diff < 0) {
                    diffCell.style.color = "red";  // –ï—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫—Ä–∞—Å–Ω—ã–π
                    priceCell.style.color = "red";
                } else {
                    diffCell.style.color = "blue";  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî —á—ë—Ä–Ω—ã–π
                    priceCell.style.color = "blue";  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî —á—ë—Ä–Ω—ã–π
                }
            }
            updatechartInstance(data)
            currentAllPrice(latestData)
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error))
}

let chartInstance = null;  // –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫

function updatechartInstance(getData) {
    console.log(`chartInstancetimeSymbol = ${tokenSymbol}`)
    const token_name = getData.price_list[0].name;
    console.log(`chartInstance_time_name = ${token_name}`)

    const ctx = document.getElementById('tokenChart').getContext('2d');
    // console.log(`ctx = ${document.getElementById('chartInstance')}`)

    const labels = getData.price_list.reverse().map(entry => convertISOToLocal(entry.timestamp));
    // var result = string .replace(/20|,/gi, () => "");   // –ú–µ—Ç–∫–∏ –æ—Å–∏ X (–≤—Ä–µ–º—è)
    const prices = getData.price_list.map(entry => entry.price);  // –î–∞–Ω–Ω—ã–µ –æ—Å–∏ Y (—Ü–µ–Ω—ã)

    if (chartInstance === null) {
        console.log("‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫!");
        chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: `${token_name} Price (USD)`,
                    data: prices,
                    borderColor: "gray",  // –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏
                    backgroundColor: "rgba(0, 0, 255, 0.1)",
                    borderWidth: 2, // –ë–∞–∑–æ–≤–∞—è —Ç–æ–ª—â–∏–Ω–∞
                    fill: true,
                    pointRadius: 0.5, // –†–∞–¥–∏—É—Å —Ç–æ—á–µ–∫
                    tension: 0.3,  // ‚úÖ –î–µ–ª–∞–µ–º –ª–∏–Ω–∏–∏ –ø–ª–∞–≤–Ω—ã–º–∏
                    segment: {
                        borderColor: ctx => {
                            const chart = ctx.chart;
                            const { data } = chart.data.datasets[0];
                            const index = ctx.p1DataIndex;  // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏

                            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
                            if (index === 0) return "gray";

                            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            return data[index] > data[index - 1] ? "green" : "red";
                        },
                        borderWidth: ctx => {
                            const chart = ctx.chart;
                            const { data } = chart.data.datasets[0];
                            const index = ctx.p1DataIndex;

                            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
                            if (index === 0) return 2;

                            // –¢–æ–ª—Å—Ç–∞—è –ª–∏–Ω–∏—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ, —Ç–æ–Ω–∫–∞—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
                            return data[index] < data[index - 1] ? 2 : 2;
                        }

                    }
                }]
            },
            options: {
                responsive: true,
                // maintainAspectRatio: false,
                animation: {
                    duration: 1000,  // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (1 —Å–µ–∫)
                    // easing: 'easeInOutQuad'
                },
                scales: {
                    x: {
                        ticks: {
                            autoSkip: true,  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ª–∏—à–Ω–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å–∏ X
                            maxTicksLimit: 10,
                        },
                        title: { display: true, text: "Date  Time" }
                    },
                    y: {
                        beginAtZero: false,  // ‚úÖ –ì—Ä–∞—Ñ–∏–∫ –±–µ–∑ —Ä–µ–∑–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Å 0
                        title: { display: true, text: "Price (USD)" }
                    }
                }
            }
        });
        const sortedPrices = getData.price_list;
        // –∫—Ä–∞—Å–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã(–∑–≤–µ–Ω—å—è) –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ñ–æ–Ω –ø–æ–¥ –Ω–∏–º–∏
        chartInstance.data.datasets[0].segment = {
            borderColor: ctx => {
                const index = ctx.p1DataIndex; // –ò–Ω–¥–µ–∫—Å –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                if (!index || index === 0) return "gray"; // –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ ‚Äî —Å–µ—Ä–∞—è
                return chartInstance.data.datasets[0].data[index] > chartInstance.data.datasets[0].data[index - 1]
                    ? "green"  // üìà –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç ‚Äî –∑–µ–ª—ë–Ω—ã–π
                    : "red";    // üìâ –ï—Å–ª–∏ –ø–∞–¥–∞–µ—Ç ‚Äî –∫—Ä–∞—Å–Ω—ã–π
            },
            backgroundColor: ctx => {
                const index = ctx.p1DataIndex;
                if (!index || index === 0) return "rgba(128, 128, 128, 0.1)"; // –°–µ—Ä—ã–π, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
                return chartInstance.data.datasets[0].data[index] > chartInstance.data.datasets[0].data[index - 1]
                    ? "rgba(0, 255, 0, 0.1)"  // üìà –ó–µ–ª—ë–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                    : "rgba(255, 0, 0, 0.1)";  // üìâ –ö—Ä–∞—Å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            }
        };
        // —Ü–≤–µ—Ç –º–µ–∂–∑–≤–µ–Ω—å–µ–≤–æ–π —Ç–æ—á–∫–∏
        chartInstance.data.datasets[0].borderColor = sortedPrices.map((priceData, i) => {
            if (i === 0) return "blue";
            return sortedPrices[i].price > sortedPrices[i - 1].price ? "green" : "red";
        });
        chartInstance.data.datasets[0].pointBackgroundColor = sortedPrices.map((priceData, i) => {
            if (i === 0) return "green";
            return sortedPrices[i].price > sortedPrices[i - 1].price ? "green" : "red";
        });
        //—Ä–∞–∑–º–µ—Ä –º–µ–∂–∑–≤–µ–Ω—å–µ–≤–æ–π —Ç–æ—á–∫–∏
        chartInstance.data.datasets[0].borderWidth = sortedPrices.map((priceData, i) => {
            if (i === 0) return 2;
            return sortedPrices[i].price > sortedPrices[i - 1].price ? 2 : 2;
        });
        chartInstance.update()
    } else {
        console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫...");
        //labels
        chartInstance.data.labels = labels
        chartInstance.data.datasets[0].label = `${token_name} Price (USD)`;
        chartInstance.data.datasets[0].data = prices
        chartInstance.update();  // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
    }
}

function currentAllPrice(latestData) {
    let tickerContainer = document.querySelector("#all-price");
   

    if (!tickerContainer) return;

    let tickerHTML = latestData.map(token => {
        let color = token.dif > 0 ? "green" : "red";
        let percentColor = token.price_change_percentage > 0 ? "green" : "red";
        
        return `
            <p class="ticker-item">
                <img class="icon" src="${token.url_icon}" alt="...">
                <span class="token-name" style="color:${color}">${token.name} ${token.price} ${token.dif > 0 ? '‚Üë' : '‚Üì'}</span>
                <span class="proc" style="color:${percentColor}">${token.price_change_percentage > 0 ? `+${token.price_change_percentage}%` : `${token.price_change_percentage}%`}</span>
            </p>
        `;
    }).join("");
    
    tickerContainer.innerHTML = tickerHTML + tickerHTML;
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–ª–æ–∫ —Ç—è–Ω–µ—Ç—Å—è —à–∏—Ä–µ —ç–∫—Ä–∞–Ω–∞
    const tickerWidth = tickerContainer.scrollWidth;
    tickerContainer.style.minWidth = `${tickerWidth}px`;

}
// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-03-12T18:45:49Z)  –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function convertISOToLocal(isoString) {
    console.log(`isoString = ${isoString}`);
    let date = new Date(isoString);
    timeLable = date.toLocaleString()
    return timeLable.slice(0,6) + timeLable.slice(8,10) + timeLable.slice(11); 
}

//—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
// –¢–æ–∫–µ–Ω
function saveSelectedToken() {
    localStorage.setItem("selectedToken", tokenSymbol);
    console.log(`‚úÖ${tokenSymbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage`)
}

//time-frame
function saveSelectedFrame() {
    localStorage.setItem("selectedFrame", timeFrame);
    console.log(`‚úÖ${timeFrame} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage`)
}

// time-period
function saveSelectedPeriod() {
    localStorage.setItem("selectedPeriod", timePeriod);
}






