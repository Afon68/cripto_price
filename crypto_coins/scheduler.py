from apscheduler.schedulers.background import BackgroundScheduler
import atexit
# from datetime import datetime, timedelta,timezone
# # print("–≠—Ç–æ—Ç –ø—Ä–∏–Ω—Ç —Å—Ç–æ–∏—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –≤ scheduler.py")
# # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
# # scheduler_started = False

# def start():
#     # global scheduler_started
#     # print(scheduler_started)
#     # if scheduler_started:  # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
#     #     print("‚ö† –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
#     #     return

#     # scheduler_started = True  # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω

    
#     print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")  # üî• –ü—Ä–æ–≤–µ—Ä–∫–∞

#     from .services import price_token_from_rialto  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º `views.py` —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏

#     scheduler = BackgroundScheduler()
#     # scheduler.add_job(price_token_from_rialto, 'date', run_date=(datetime.now() + timedelta(minutes=1)), id='price_token_from_rialto_1')
#     scheduler.add_job(price_token_from_rialto, "interval", seconds=60)     #  minutes=1  seconds=60  hours=1/20
#     scheduler.start()

#     # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ Django-—Å–µ—Ä–≤–µ—Ä–∞
#     atexit.register(lambda: scheduler.shutdown(wait=False))


def start():
    """–ó–∞–ø—É—Å–∫ Selenium –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Django"""
    print("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º Selenium –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Django...")
    
    # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º Selenium –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    from .services import price_token_from_rialto
    threading.Thread(target=price_token_from_rialto, daemon=True).start()
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler()
    scheduler.start()
    atexit.register(lambda: scheduler.shutdown(wait=False))

# from apscheduler.schedulers.background import BackgroundScheduler
# import asyncio
# import threading
# from .fetch_token_price import run_all_tokens  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

# def job_wrapper():
#     """–ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
#     loop = asyncio.new_event_loop()
#     asyncio.set_event_loop(loop)
#     loop.run_until_complete(run_all_tokens())  # ‚úÖ –¢–µ–ø–µ—Ä—å `asyncio.run()` –Ω–µ –Ω—É–∂–µ–Ω

# def start():
#     """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
#     scheduler = BackgroundScheduler()
#     scheduler.add_job(job_wrapper, "interval", minutes=1)  # üî• –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
#     scheduler.start()

#     # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ `asyncio`
#     threading.Thread(target=scheduler.start, daemon=True).start()
#     print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")

#     # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ Django-—Å–µ—Ä–≤–µ—Ä–∞
#     atexit.register(lambda: scheduler.shutdown(wait=False))

   

