let tokenSymbol = null;  // –¢–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let timeFrame;
let timePeriod;
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function clickButton() {
    console.log("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç clickButton");

    const buttons_time = document.querySelectorAll(".token-button");

    if (buttons_time.length > 0) {
        tokenSymbol = buttons_time[1].getAttribute("data-symbol");  // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
        // fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    }

    buttons_time.forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();  // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ <a>
            tokenSymbol = this.getAttribute("data-symbol");  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            console.log(`üîπ –í—ã–±—Ä–∞–Ω —Ç–æ–∫–µ–Ω: ${tokenSymbol}`);
            fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        });
    });
    const buttons_frame = document.querySelectorAll(".frame-button");

    if (buttons_frame.length > 0) {
        timeFrame = buttons_frame[3].getAttribute("data-frame");  // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
        // fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    }

    buttons_frame.forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();  // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ <a>
            timeFrame = this.getAttribute("data-frame");  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            console.log(`üîπ –í—ã–±—Ä–∞–Ω frame: ${timeFrame}`);
            fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        });
    });

    const buttons_period = document.querySelectorAll(".period-button");

    if (buttons_period.length > 0) {
        timePeriod = buttons_period[1].getAttribute("data-period");
        console.log(`üîπ Time Period: ${timePeriod}`); // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
        fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    }

    buttons_period.forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();  // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ <a>
            timePeriod = this.getAttribute("data-period");  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            console.log(`üîπ –í—ã–±—Ä–∞–Ω Period: ${timePeriod}`);
            fetchData();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        });
    });
    console.log(`üîπ –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${tokenSymbol}`);
    // console.log(`üîπ –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${timeFrame}`);
}

// –ñ–¥—ë–º, –ø–æ–∫–∞ DOM –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener("DOMContentLoaded", function () {
    console.log("‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω!");
    // let current = document.getElementById("current");
    // console.log("üîç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç:", current); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç

    // if (current) {
    //     current.innerText = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω—ã..."; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
    //     current.style.color = "gray";
    // } else {
    //     console.error("‚ùå –û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç —Å id='current' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    // }

    clickButton();  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
});



// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ `setTimeout`
// setTimeout(() => {
//     console.log("‚è≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 500 –º—Å...");
//     clickButton();
// }, 500);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
    fetchData();
}, 60000);

// clickButton()
// setInterval(fetchData, 60000);

// setInterval(clickButton, 60000);  // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
// clickButton()  // üî• –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü

function fetchData() {

    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${tokenSymbol}/${timeFrame}/${timePeriod}/`);  // /${timeFrame}
    fetch(`/latest-price-list/${tokenSymbol}/${timeFrame}/${timePeriod}/`)  // ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω   /${timeFrame}
        .then(response => response.json())
        .then(data => {
            console.log(`–î–∞–Ω–Ω—ã–µ = ${data.price_list}`);  // –≤ data –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ price_list(—Ü–µ–Ω—ã –∑–∞ —Å—É—Ç–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É) –∏ last_all_price(–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã)
            const latestData = data.last_all_price;  // –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
            let title = document.querySelector("title");  // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            title.innerText = tokenSymbol

            let frame = document.getElementById("frame");
            if (frame) {
                frame.innerText = timeFrame < 50 ? timeFrame + " min" : "1 hour"
            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞: Element frame –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            let period = document.getElementById("period");
            period.innerText = timePeriod === 1 ? "1 hour" : timePeriod + "hours"

            let table = document.querySelector("table");  // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table.innerHTML = `
                <tr>
                    <th>Time</th>
                    <th>Price(USD)</th>
                    <th>Change</th>
                </tr>`;  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º **—Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É**
            // let latest_price = data.price_list[0].price;
            // let previous_price = data.price_list[1].price;

            // // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            // let priceElement = document.getElementById("eth-price");
            // priceElement.innerText = latest_price + " USD " + (latest_price > previous_price ? "‚Üë" : "‚Üì");
            // priceElement.style.color = latest_price > previous_price ? "green" : "red";
            let token_name = data.price_list[0].name;
            //let current = document.getElementById("current") ; // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            // // current.innerText = time_name;
            //current.innerText = "–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è:";
            //current.style.color = latest_price > previous_price ? "green" : "red";
            //current
            let latest_price = data.price_list[0].price;
            let previous_price = data.price_list[1]?.price || latest_price;  // –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞

            // let priceElement = document.getElementById("eth-price");
            let current = document.getElementById("current");
            // priceElement.innerText = latest_price + " USD " + (latest_price > previous_price ? "‚Üë" : "‚Üì");
            // priceElement.style.color = latest_price > previous_price ? "green" : "red";
            if (current) {
                if (latestData) {
                    latestData.forEach(token => {
                        if(token.name === token_name) {
                            current.innerText = `Current ${token_name} Price: ${token.price} USD ${(token.dif > 0 ? "‚Üë" : "‚Üì")}`;
                            current.style.color = token.dif > 0 ? "green" : "red";
                        }
                    })
                }
                
            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞: priceElement –∏–ª–∏ current –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }

            let history = document.getElementById("history-price");
            history.innerText = `${token_name} Price History `
            // let current = document.getElementById("current");
            // console.log("üîç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç:", current); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç

            // if (current) {
            //     current.innerText = "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ Bitcoin:";
            //     current.style.color = "green";
            // } else {
            //     console.error("‚ùå –û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç —Å id='current' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            // }


            // if (data.price_list.length > 0) {
            //     let time_name = data.price_list[0].name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω"; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
            //     let current = document.getElementById("current"); 
            //     current.innerText = `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${time_name}:`;
            //     current.style.color = latest_price > previous_price ? "green" : "red";
            // } else {
            //     console.error("‚ùå –û—à–∏–±–∫–∞: –º–∞—Å—Å–∏–≤ price_list –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö!");
            // }


            for (let elem of data.price_list) {
                let row = table.insertRow(-1);  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                row.insertCell(0).innerText = elem.timestamp;  // –í—Ä–µ–º—è

                /*let priceCell = row.insertCell(1)
                if (elem.diff > 0) priceCell.innerText = elem.price + " ‚ñ≤";  // –¶–µ–Ω–∞
                else if (elem.diff < 0) priceCell.innerText = elem.price + " üîΩ";
                else priceCell.innerText = elem.price*/
                let priceCell = row.insertCell(1)
                priceCell.innerHTML = elem.price + "  " + elem.direction;  // –¶–µ–Ω–∞ + —Å—Ç—Ä–µ–ª–∫–∞ (HTML)
                //row.insertCell(2).innerText = elem.diff !== null ? elem.diff : "-";  // –†–∞–∑–Ω–∏—Ü–∞ // —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä {% endcomment %}
                let diffCell = row.insertCell(2);
                diffCell.innerText = elem.diff !== null ? elem.diff : "‚Äî";  // –†–∞–∑–Ω–∏—Ü–∞

                if (elem.diff > 0) {
                    priceCell.style.color = "green";
                    diffCell.style.color = "green";  // –ï—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∑–µ–ª—ë–Ω—ã–π

                } else if (elem.diff < 0) {
                    diffCell.style.color = "red";  // –ï—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫—Ä–∞—Å–Ω—ã–π
                    priceCell.style.color = "red";
                } else {
                    diffCell.style.color = "blue";  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî —á—ë—Ä–Ω—ã–π
                    priceCell.style.color = "blue";  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî —á—ë—Ä–Ω—ã–π
                }
                /*for(let item of document.querySelectorAll('td');)
                    /*if(item == diff.innerText) > 0){ elem.diff.style.color = 'green';} 
                    else if (Number(elem.diff.innerText) < 0)  {elem.diff.style.color = 'red';}
                    else {elem.diff.style.color = 'black';} */
            }
            updatechartInstance(data)
            currentAllPrice(latestData)
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error))
}

// setInterval(fetchData, 60000);  // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
// fetchData(timeSymbol)  // üî• –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

// let lab = ""
// let chartInstance = null ;     // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
// function updatechartInstance(getData) {
//     console.log(`chartInstancetimeSymbol = ${timeSymbol}`)
//     // console.log(`chartInstance_time_name = ${time_name}`)
//     let time_name = getData.price_list[0].name
//     // lab = chartInstance.data.datasets[0].label

//     //‚úÖ –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —É–∂–µ –µ—Å—Ç—å, —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
//     if (chartInstance !== null) {
//         chartInstance.destroy();
//         console.log("üõë –°—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫ —É–¥–∞–ª—ë–Ω!");
//     }

//     // let time_name = getData.price_list[0].name 
//     const ctx = document.getElementById('chartInstance').getContext('2d');
//     // console.log("‚úÖ WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.");
//     chartInstance = new Chart(ctx, {
//         type: 'line',
//         data: {
//             labels: [],
//             datasets: [{
//                 label: `${time_name} Price (USD)`,
//                 data: [],
//                 borderColor: "gray",  // –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏
//                 backgroundColor: "rgba(0, 0, 255, 0.1)",
//                 borderWidth: 2, // –ë–∞–∑–æ–≤–∞—è —Ç–æ–ª—â–∏–Ω–∞
//                 fill: true,
//                 pointRadius: 3, // –†–∞–¥–∏—É—Å —Ç–æ—á–µ–∫
//                 pointBackgroundColor: "gray", // –¶–≤–µ—Ç —Ç–æ—á–µ–∫
//                 segment: {
//                     borderColor: ctx => {
//                         const chart = ctx.chart;
//                         const { data } = chart.data.datasets[0];
//                         const index = ctx.p1DataIndex;  // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏

//                         // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
//                         if (index === 0) return "gray";

//                         // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//                         return data[index] > data[index - 1] ? "green" : "red";
//                     },
//                     borderWidth: ctx => {
//                         const chart = ctx.chart;
//                         const { data } = chart.data.datasets[0];
//                         const index = ctx.p1DataIndex;

//                         // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
//                         if (index === 0) return 2;

//                         // –¢–æ–ª—Å—Ç–∞—è –ª–∏–Ω–∏—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ, —Ç–æ–Ω–∫–∞—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
//                         return data[index] < data[index - 1] ? 7 : 1;
//                     }
//                 }
//             }]
//         },
//         options: {
//             scales: {
//                 x: { title: { display: true, text: "–í—Ä–µ–º—è" } },
//                 y: { title: { display: true, text: "–¶–µ–Ω–∞ (USD)" } }
//             }
//         }
//     });

//     // chartInstance.data.datasets[0].label = `${time_name} Price (USD)`
//     if (typeof window.time_name === 'undefined') {
//         console.warn(`${time_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window.`);
//     } else {
//         console.warn(`${time_name}—É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, MetaMask). –ö–æ–Ω—Ñ–ª–∏–∫—Ç —É—Å—Ç—Ä–∞–Ω—ë–Ω.`);
//     }
//     // time_name = getData.price_list[0].name;
//     // console.log(`chartInstance_time_name = ${time_name}`)
//     // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
//     // const socket = new WebSocket("ws://127.0.0.1:8000/ws/eth-price/");
//     // const socket = new WebSocket(
//     //     window.location.protocol === "https:" ? 
//     //     `wss://${window.location.host}/ws/eth-price/` : 
//     //     `ws://${window.location.host}/ws/eth-price/`
//     // );
//     // socket.onmessage = function (event) {
//     //     console.log("üì© –î–∞–Ω–Ω—ã–µ –æ—Ç WebSocket:", event.data);
//     //     const data = JSON.parse(event.data);

//     // socket.onmessage = function (event) {
//     //     console.log("üì© –î–∞–Ω–Ω—ã–µ –æ—Ç WebSocket:", event.data);
//     //     const data = JSON.parse(event.data);
//     //     if (!data.prices || !Array.isArray(data.prices)) {
//     //         console.error("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ WebSocket –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.");
//     //         return;
//     //     }
//     // ‚úÖ 1. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤ –∫–æ–Ω—Ü–µ
//     const sortedPrices = getData.price_list;
//     console.log(getData.price_list[0].name, getData.price_list[0].price)
//     // const sortedPrices = data.prices;
//     // ‚úÖ 2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
//     chartInstance.data.labels = [];
//     chartInstance.data.datasets[0].data = [];
//     //ethChart.data.datasets[0].borderColor = [];
//     sortedPrices.forEach(priceData => {
//         // if(i < length.sortedPrices-1) {           // ‚¨ÖÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
//         //     if(sortedPrices[i].price > sortedPrices[i+1].price) ethChart.data.datasets[0].backgroundColor.unshift("green")
//         //     else ethChart.data.datasets[0].backgroundColor.unshift("red")
//         /*sortedPrices[i].price > sortedPrices[i+1].price? 
//         ethChart.data.datasets[0].borderColor="red":
//         ethChart.data.datasets[0].borderColor="green";*/

//         chartInstance.data.labels.unshift(priceData.timestamp);
//         chartInstance.data.datasets[0].data.unshift(priceData.price);
//     });
//     // –∫—Ä–∞—Å–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã(–∑–≤–µ–Ω—å—è) –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ñ–æ–Ω –ø–æ–¥ –Ω–∏–º–∏
//     chartInstance.data.datasets[0].segment = {
//         borderColor: ctx => {
//             const index = ctx.p1DataIndex; // –ò–Ω–¥–µ–∫—Å –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
//             if (!index || index === 0) return "gray"; // –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ ‚Äî —Å–µ—Ä–∞—è
//             return chartInstance.data.datasets[0].data[index] > chartInstance.data.datasets[0].data[index - 1]
//                 ? "green"  // üìà –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç ‚Äî –∑–µ–ª—ë–Ω—ã–π
//                 : "red";    // üìâ –ï—Å–ª–∏ –ø–∞–¥–∞–µ—Ç ‚Äî –∫—Ä–∞—Å–Ω—ã–π
//         },
//         backgroundColor: ctx => {
//             const index = ctx.p1DataIndex;
//             if (!index || index === 0) return "rgba(128, 128, 128, 0.1)"; // –°–µ—Ä—ã–π, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
//             return chartInstance.data.datasets[0].data[index] > chartInstance.data.datasets[0].data[index - 1]
//                 ? "rgba(0, 255, 0, 0.1)"  // üìà –ó–µ–ª—ë–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
//                 : "rgba(255, 0, 0, 0.1)";  // üìâ –ö—Ä–∞—Å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
//         }
//     };
//     // —Ü–≤–µ—Ç –º–µ–∂–∑–≤–µ–Ω—å–µ–≤–æ–π —Ç–æ—á–∫–∏
//     chartInstance.data.datasets[0].borderColor = sortedPrices.reverse().map((priceData, i) => {
//         if (i === 0) return "gray";
//         return sortedPrices[i].price > sortedPrices[i - 1].price ? "green" : "red";
//     });
//     // —Ä–∞–∑–º–µ—Ä –º–µ–∂–∑–≤–µ–Ω—å–µ–≤–æ–π —Ç–æ—á–∫–∏
//     chartInstance.data.datasets[0].borderWidth = sortedPrices.map((priceData, i) => {
//         if (i === 0) return 2;
//         return sortedPrices[i].price > sortedPrices[i - 1].price ? 4 : 4;
//     });

//     // ethChart.data.datasets[0].borderColor = borderColors;
//     /* ‚úÖ 3. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ç–æ—á–µ–∫ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫)
//     while (ethChart.data.labels.length > 10) {
//         ethChart.data.labels.shift();
//         ethChart.data.datasets[0].data.shift();
//     } */

//     // ‚úÖ 4. –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
//     chartInstance.update();
// }

// socket.onclose = function(event) {
//     console.log("WebSocket –∑–∞–∫—Ä—ã—Ç, –∫–æ–¥:", event.code);
// };

let chartInstance = null;  // –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫

function updatechartInstance(getData) {
    console.log(`chartInstancetimeSymbol = ${tokenSymbol}`)
    const token_name = getData.price_list[0].name;
    console.log(`chartInstance_time_name = ${token_name}`)

    const ctx = document.getElementById('tokenChart').getContext('2d');
    // console.log(`ctx = ${document.getElementById('chartInstance')}`)

    const labels = getData.price_list.reverse().map(entry => entry.timestamp.replace('20', ""));  // –ú–µ—Ç–∫–∏ –æ—Å–∏ X (–≤—Ä–µ–º—è)
    const prices = getData.price_list.map(entry => entry.price);  // –î–∞–Ω–Ω—ã–µ –æ—Å–∏ Y (—Ü–µ–Ω—ã)

    if (chartInstance === null) {
        console.log("‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫!");
        chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: `${token_name} Price (USD)`,
                    data: prices,
                    borderColor: "gray",  // –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏
                    backgroundColor: "rgba(0, 0, 255, 0.1)",
                    borderWidth: 2, // –ë–∞–∑–æ–≤–∞—è —Ç–æ–ª—â–∏–Ω–∞
                    fill: true,
                    pointRadius: 3, // –†–∞–¥–∏—É—Å —Ç–æ—á–µ–∫
                    // pointBackgroundColor: "white", // –¶–≤–µ—Ç —Ç–æ—á–µ–∫
                    // pointBorderColor: "blue",
                    tension: 0.3,  // ‚úÖ –î–µ–ª–∞–µ–º –ª–∏–Ω–∏–∏ –ø–ª–∞–≤–Ω—ã–º–∏
                    segment: {
                        borderColor: ctx => {
                            const chart = ctx.chart;
                            const { data } = chart.data.datasets[0];
                            const index = ctx.p1DataIndex;  // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏

                            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
                            if (index === 0) return "gray";

                            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            return data[index] > data[index - 1] ? "green" : "red";
                        },
                        borderWidth: ctx => {
                            const chart = ctx.chart;
                            const { data } = chart.data.datasets[0];
                            const index = ctx.p1DataIndex;

                            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
                            if (index === 0) return 2;

                            // –¢–æ–ª—Å—Ç–∞—è –ª–∏–Ω–∏—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ, —Ç–æ–Ω–∫–∞—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
                            return data[index] < data[index - 1] ? 2 : 2;
                        }

                    }
                }]
                // datasets: [{
                //     label: `${token_name} Price (USD)`,
                //     data: prices,
                //     borderColor: "blue",  
                //     backgroundColor: "rgba(0, 0, 255, 0.1)",  
                //     tension: 0.3  // ‚úÖ –î–µ–ª–∞–µ–º –ª–∏–Ω–∏–∏ –ø–ª–∞–≤–Ω—ã–º–∏
                // }]
            },
            options: {
                responsive: true,
                // maintainAspectRatio: false,
                animation: {
                    duration: 1000,  // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (1 —Å–µ–∫)
                    // easing: 'easeInOutQuad'
                },
                scales: {
                    x: {
                        ticks: {
                            autoSkip: true,  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ª–∏—à–Ω–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å–∏ X
                            maxTicksLimit: 10,


                        },
                        title: { display: true, text: "Date  Time" }
                    },
                    y: {
                        beginAtZero: false,  // ‚úÖ –ì—Ä–∞—Ñ–∏–∫ –±–µ–∑ —Ä–µ–∑–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Å 0
                        title: { display: true, text: "Price (USD)" }
                    }

                }
            }


        });
        const sortedPrices = getData.price_list;
        // –∫—Ä–∞—Å–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã(–∑–≤–µ–Ω—å—è) –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ñ–æ–Ω –ø–æ–¥ –Ω–∏–º–∏
        chartInstance.data.datasets[0].segment = {
            borderColor: ctx => {
                const index = ctx.p1DataIndex; // –ò–Ω–¥–µ–∫—Å –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                if (!index || index === 0) return "gray"; // –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ ‚Äî —Å–µ—Ä–∞—è
                return chartInstance.data.datasets[0].data[index] > chartInstance.data.datasets[0].data[index - 1]
                    ? "green"  // üìà –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç ‚Äî –∑–µ–ª—ë–Ω—ã–π
                    : "red";    // üìâ –ï—Å–ª–∏ –ø–∞–¥–∞–µ—Ç ‚Äî –∫—Ä–∞—Å–Ω—ã–π
            },
            backgroundColor: ctx => {
                const index = ctx.p1DataIndex;
                if (!index || index === 0) return "rgba(128, 128, 128, 0.1)"; // –°–µ—Ä—ã–π, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
                return chartInstance.data.datasets[0].data[index] > chartInstance.data.datasets[0].data[index - 1]
                    ? "rgba(0, 255, 0, 0.1)"  // üìà –ó–µ–ª—ë–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                    : "rgba(255, 0, 0, 0.1)";  // üìâ –ö—Ä–∞—Å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            }
        };
        // —Ü–≤–µ—Ç –º–µ–∂–∑–≤–µ–Ω—å–µ–≤–æ–π —Ç–æ—á–∫–∏
        chartInstance.data.datasets[0].borderColor = sortedPrices.map((priceData, i) => {
            if (i === 0) return "blue";
            return sortedPrices[i].price > sortedPrices[i - 1].price ? "green" : "red";
        });
        chartInstance.data.datasets[0].pointBackgroundColor = sortedPrices.map((priceData, i) => {
            if (i === 0) return "green";
            return sortedPrices[i].price > sortedPrices[i - 1].price ? "green" : "red";
        });
        //—Ä–∞–∑–º–µ—Ä –º–µ–∂–∑–≤–µ–Ω—å–µ–≤–æ–π —Ç–æ—á–∫–∏
        chartInstance.data.datasets[0].borderWidth = sortedPrices.map((priceData, i) => {
            if (i === 0) return 2;
            return sortedPrices[i].price > sortedPrices[i - 1].price ? 2 : 2;
        });
        chartInstance.update()
    } else {
        console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫...");
        //labels
        chartInstance.data.labels = labels
        chartInstance.data.datasets[0].label = `${token_name} Price (USD)`;
        chartInstance.data.datasets[0].data = prices
        chartInstance.update();  // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
    }
}

// üî• –ß—Ç–æ —É–ª—É—á—à–µ–Ω–æ?
// ‚úÖ –ë–æ–ª—å—à–µ –Ω–µ—Ç destroy(), –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ.
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è duration: 1000 –∏ easing: 'easeInOutQuad' (–≥–ª–∞–¥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ).
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tension: 0.3, —á—Ç–æ–±—ã –ª–∏–Ω–∏–∏ –±—ã–ª–∏ –ø–ª–∞–≤–Ω–µ–µ.
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ autoSkip –∏ maxTicksLimit, —á—Ç–æ–±—ã –æ—Å—å X –≤—ã–≥–ª—è–¥–µ–ª–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.

// –¢–µ–ø–µ—Ä—å –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–ª–∞–≤–Ω–æ, –±–µ–∑ –≥—Ä—É–±—ã—Ö —Å–∫–∞—á–∫–æ–≤! üöÄüìä‚ú®


function currentAllPrice(latestData) {
    /* —Ñ—É–Ω–∫—Ü–∏–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–∫–µ–Ω–∞*/
    console.log(`latestData=${latestData}`)

    let allPrice = document.getElementById("all-price");
    let allPriceParag = allPrice.getElementsByTagName("p");
    console.log(`len allPriceParag=${allPriceParag.length}`)
    console.log(`len latestData=${latestData.length}`)
    // latestData.forEach(priceName => {
    //     if (allPrice) {
    //         allPrice.innerText = `${priceName.name} ${priceName.price}`
    //     } else {
    //         console.error("‚ùå –û—à–∏–±–∫–∞: allPrice & latestData  –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
    //     }
    // })

    for (let i = 0; i < allPriceParag.length; i++) {
        for (let j = 0; j < latestData.length; j++) {
            if (i === j) {
                allPriceParag[i].innerText = latestData[j].dif > 0 ?`${latestData[j].name} ${latestData[j].price}‚Üë`:`${latestData[j].name} ${latestData[j].price}‚Üì`
                allPriceParag[i].style.color = latestData[j].dif > 0  ? "green" : "red";
                // priceElement.innerText = latest_price + " USD " + (latest_price > previous_price ? "‚Üë" : "‚Üì");
            }
        }
    }
    // allPriceParag.forEach((item, i) => {
    //     allPriceParag.forEach((elem, j) => {
    //         if (i === j) {
    //             allPriceParag[i].innerText = `${latestData[j].name} ${latestData[j].price}`
    //         }
    //     })

        
    // })
}
// function div2ParaElems() {
//     const div2 = document.getElementById("div2");
//     const div2Paras = div2.getElementsByTagName("p");
//     const num = div2Paras.length;
//     alert(`There are ${num} paragraph in #div2`);
//   }



