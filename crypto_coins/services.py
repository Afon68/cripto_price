import os
import time
import logging
from django.db import connection
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from django.utils.timezone import now
from crypto_coins.models import CoinPrice, Token  # –ü–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π –ø—É—Ç—å
from selenium.common.exceptions import WebDriverException


logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def fetch_prices(driver):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ë–î"""
    tokens = Token.objects.only("symbol", "url_token")  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    for token in tokens:
        driver.get(token.url_token)  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç —Ç–æ–∫–µ–Ω–∞
        WebDriverWait(driver, 10).until(lambda d: " | " in d.execute_script("return document.title"))  
        title = driver.execute_script("return document.title")
        price = float(title.split("|")[0].strip().replace(",", ""))
        # –ó–∞–ø–∏—Å—å –≤ –ë–î
        CoinPrice.objects.create(price=price, token=token)
        logging.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏ –≤ –ë–î: {token.symbol} = {price}")
    
    delete_entrys(tokens)
    get_table_size()

def get_table_size():
    with connection.cursor() as cursor:  # —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã coinprice
        cursor.execute("SELECT pg_size_pretty(pg_total_relation_size('crypto_coins_coinprice'));")
        size = cursor.fetchone()
        print(size[0])  # –æ–±—ä–µ–º —Ç–∞–±–ª–∏—Ü—ã CoinPrice –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö

def start_selenium():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞ Chrome"""
    try:
        os.system("pkill -f chromedriver")  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        os.system("pkill -f chrome")

        service = Service(ChromeDriverManager().install())
        options = Options()
        options.add_argument("--headless")  # –ë–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")  
        options.add_argument("--remote-debugging-port=9222")  

        time.sleep(5)  # –ü–æ–¥–æ–∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º

        return webdriver.Chrome(service=service, options=options)
    except WebDriverException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Selenium: {e}")
        return None  # üö® –ï—Å–ª–∏ Selenium –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


def price_token_from_rialto():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –±—Ä–∞—É–∑–µ—Ä–∞"""

    driver = start_selenium()  # üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ 

    if driver is None:
        logging.critical("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Selenium! –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        return  # üö® –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è

    t = 25  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    while True:  # üîÑ –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–∫–ª—é—á–∏—Ç—Å—è
        try:
            logging.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã...")
            fetch_prices(driver)  # üî• –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            logging.info(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {t} —Å–µ–∫—É–Ω–¥...")
            time.sleep(t)  # –ñ–¥—ë–º t —Å–µ–∫—É–Ω–¥

        except WebDriverException as e:
            logging.warning(f"‚ö† WebDriverException: {e}")
            logging.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
            driver = start_selenium()  # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä NewConnectionError

            if driver is None:
                logging.critical("‚ùå Selenium –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ —Å–±–æ—è! –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞.")
                break  # üö® –ü—Ä–µ—Ä—ã–≤–∞–µ–º while True, –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        
        except KeyboardInterrupt:
            logging.warning("‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
            break  # üö® –í—ã—Ö–æ–¥ –∏–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logging.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)  # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
            driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
            driver = start_selenium()  # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑
    driver.quit()  # üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    logging.info("üö™ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

def delete_entrys(tokens):
    all_entrys = CoinPrice.objects.all()
    if len(all_entrys) > 1450 * len(tokens):
        dif_entrys = len(all_entrys) - 1450 * len(tokens)  # - –∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è 
        last_few = all_entrys.order_by('id')[:dif_entrys]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        CoinPrice.objects.filter(id__in=last_few.values_list('id', flat=True)).delete()  # –£–¥–∞–ª—è–µ–º –∏—Ö
        logging.info(f"üóëüß∫ –£–¥–∞–ª–µ–Ω—ã {dif_entrys} –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î")
        logging.info(f"üßÆ –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ CoinPrice = {len(all_entrys) - dif_entrys}")