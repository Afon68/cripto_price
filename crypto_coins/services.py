import logging
from django.shortcuts import get_object_or_404
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
# from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup
import time
import requests
import selenium

from crypto_coins.models import CoinPrice 
from crypto_coins.models import Token
from django.db import connection


print(f"selenium.__version__ = {selenium.__version__}")
# from selenium.webdriver.chrome.service import  WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
# from webdriver_manager.core.utils import ChromeDriverManager
import webdriver_manager

"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç:

%(asctime)s ‚Üí —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
%(levelname)s ‚Üí —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (INFO, ERROR –∏ —Ç. –¥.)
%(message)s ‚Üí —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def price_token_from_rialto():
    """–§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium
    service = Service(ChromeDriverManager().install())
    options = Options()
    options.add_argument("--headless")  # –ë–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    try:
        driver = webdriver.Chrome(service=service, options=options)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Selenium: {e}")
        return None
    
    prices = []
    tokens = Token.objects.all()
    if tokens:
        for item in tokens:

          
            driver.get(item.url_token)

            # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç—ç–≥–∞
            # try:
            #     WebDriverWait(driver, 15).until(
            #         EC.presence_of_element_located((By.TAG_NAME, "title"))
            #     )
            #     print("‚úÖ –¢—ç–≥ –Ω–∞–π–¥–µ–Ω!")
            # except:
            #     print("‚ùå –¢—ç–≥ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ–∑–∂–µ!")
        
            # print("üî•–£—Ä–∞ !!!!!! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—É—á–∏–ª !!!!!!! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é !!!!!üí™üöÄ")
            # üî• –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å—Å—è
        
            
            try:
                # print("–í —Ü–∏–∫–ª–µ")
                # time.sleep(5)
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                # driver.get_screenshot_as_file("screenshot.png")
                # –ü–æ–ª—É—á–∞–µ–º HTML
                
                # time.sleep(5)
                # title = driver.find_element(By.TAG_NAME, "title").text
                
                # html = driver.page_source
                # soup = BeautifulSoup(html, "html.parser")

                # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—ã
                # title = soup.find_all("title")
                # print(title)
                # eth_price = float(title[0].text.split("|")[0].strip().replace(',', ''))
                # price = float(title[0].text.split("|")[0].strip().replace(',', ''))
                # print(price)
#                 –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?

                # –ñ–¥–µ—Ç, –ø–æ–∫–∞ document.title –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏ –≤ –Ω–µ–º –ø–æ—è–≤–∏—Ç—Å—è " | " (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ü–µ–Ω).
                # –ò–∑–≤–ª–µ–∫–∞–µ—Ç title —á–µ—Ä–µ–∑ execute_script, –±–µ–∑ find_element().
                # –ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É, —É–±–∏—Ä–∞—è –∑–∞–ø—è—Ç—ã–µ.
                # title = driver.execute_script("return document.title;")
                WebDriverWait(driver, 10).until(
                    lambda d: d.execute_script("return document.title") and " | " in d.execute_script("return document.title")
                )
                title = driver.execute_script("return document.title;")  # –≠—Ç–æ—Ç –∫–æ–¥ –±–µ—Ä–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ DOM —Å –ø–æ–º–æ—â—å—é JavaScript.
                # print(f"‚úÖ title = {title}")
                price = float(title.split("|")[0].strip().replace(',', ''))
                # print(f"‚úÖ –¶–µ–Ω–∞ {item.symbol} = {price}")
                # token, _ = Token.objects.get_or_create(name="Ethereum")
                # token = get_object_or_404(Token,name=item.name)
                # print(f'‚úÖ token = {token}')
                # print(item.symbol)
                # (ETH) Bitcoin (BTC)
                if price:
                    prices.append(CoinPrice(price=price, token=item))
                    logging.info(f"üî•–ó–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ prices —Å–¥–µ–ª–∞–Ω–∞ !üöÄüí™:–¶–µ–Ω–∞ {item.name} = {price}")
                    delete_entrys()
                    
                else:
                    print("‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –ø—Ä–∏—à–ª–∏ - –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ –≤ –ë–î")
                    return
                # prices[item.symbol] = price
                
            except Exception as e:
                print("‚ùå –¢—ç–≥ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ–∑–∂–µ!")
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    else:
        print("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –ë–î")
        return None 
    CoinPrice.objects.bulk_create(prices)
    logging.info(f"üî•–ó–∞–ø–∏—Å—å –≤ –ë–î  —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ bulk_create(prices) —Å–¥–µ–ª–∞–Ω–∞ !üöÄüí™")
    logging.info(f"‚úÖ –û–±—ä—ë–º –ë–î –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ {1450 * len(tokens)} –∑–∞–ø–∏—Å–µ–π")
        # # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    driver.quit()
    logging.info("‚úÖ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É")
    # delete_entrys()
    logging.info(f"‚úÖ–ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ CoinPrice = {len(CoinPrice.objects.all())}")
    with connection.cursor() as cursor: # —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã coinprice
        cursor.execute("SELECT pg_size_pretty(pg_total_relation_size('crypto_coins_coinprice'));")
        size = cursor.fetchone()
        print(f"size = {size[0]}")
    return True


def delete_entrys():
    # logging.info(f"‚úÖ–ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ CoinPrice = {len(CoinPrice.objects.all())}")
    if len(CoinPrice.objects.all()) > 1450 * len(tokens):
        CoinPrice.objects.last().delete()
   
        # CoinPrice.objects.filter(id__lt=4).delete()
    # print(prices)
    # return prices

    # return tariffs
    # # üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
    # service = Service(ChromeDriverManager().install())
    # options = Options()
    # options.add_argument("--headless")  # –ë–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    # options.add_argument("--disable-gpu")
    # options.add_argument("--no-sandbox")

    # driver = webdriver.Chrome(service=service, options=options)
    # driver.get("https://example.com")  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–∞–π—Ç

    # time.sleep(5)  # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å—Å—è
    
    # # ‚úÖ –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    # html = driver.page_source
    # soup = BeautifulSoup(html, "html.parser")
    
    # price_element = soup.find("div", class_="price").text.strip().replace(",", ".")
    # price = float(price_element)

    # # ‚úÖ –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω (Ethereum)
    # token, _ = Tokens.objects.get_or_create(name="Ethereum")

    # # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ –ë–î
    # CoinPrice.objects.create(price=price, token=token)
    # print(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏ –≤ –ë–î: {token.name} = {price} USD")
    # CoinPrice.objects.filter(token__symbol="BTC").order_by('-timestamp').first()
    # driver.quit()
