document.addEventListener("DOMContentLoaded", function () {
    const buttons = document.querySelectorAll(".token-button");
    
    buttons.forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();  // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ <a>
            
            const tokenSymbol = this.getAttribute("data-symbol");  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            
            console.log(`–í—ã–±—Ä–∞–Ω —Ç–æ–∫–µ–Ω: ${tokenSymbol}`);  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
            fetch(`/latest-price-list/${tokenSymbol}`)
                .then(response => response.json())
                .then(data => {
                    console.log(data);  // –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –æ—Ç–≤–µ—Ç–µ
                    
                    if (data.price_list !== "–ù–µ—Ç —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö") {
                        updatePriceTable(data.price_list);  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                    } else {
                        alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!");
                    }
                })
                .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error));
        });
    });
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ü–µ–Ω
function updatePriceTable(priceList) {
    const table = document.getElementById("table-container");
    table.innerHTML = "<tr><th>–í—Ä–µ–º—è</th><th>–¶–µ–Ω–∞</th><th>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</th></tr>";  // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    
    priceList.forEach(item => {
        const row = `<tr>
            <td>${item.timestamp}</td>
            <td>${item.price}</td>
            <td>${item.direction} ${item.diff !== null ? item.diff : "-"}</td>
        </tr>`;
        table.innerHTML += row;
    });

    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////

document.addEventListener("DOMContentLoaded", function () {
    const buttons = document.querySelectorAll(".token-button");
    const firstToken = buttons.length > 0 ? buttons[0].getAttribute("data-symbol") : null;  // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω

    if (firstToken) {
        fetchData(firstToken);  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    }

    buttons.forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();  // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
            
            const tokenSymbol = this.getAttribute("data-symbol");
            fetchData(tokenSymbol);  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        });
    });
});

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function fetchData(tokenSymbol) {
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${tokenSymbol}`);

    fetch(`/latest-price-list/${tokenSymbol}`)
        .then(response => response.json())
        .then(data => {
            console.log("üìä –î–∞–Ω–Ω—ã–µ:", data);

            if (data.price_list !== "–ù–µ—Ç —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö") {
                updatePriceTable(data.price_list);
            } else {
                alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!");
            }
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error));
}

// üìå –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
function updatePriceTable(priceList) {
    const table = document.getElementById("table-container");
    table.innerHTML = "<tr><th>–í—Ä–µ–º—è</th><th>–¶–µ–Ω–∞</th><th>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</th></tr>";  // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    
    priceList.forEach(item => {
        const row = `<tr>
            <td>${item.timestamp}</td>
            <td>${item.price}</td>
            <td>${item.direction} ${item.diff !== null ? item.diff : "-"}</td>
        </tr>`;
        table.innerHTML += row;
    });

    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
}


let chartInstance = null;  // –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫

function updateTokenChart(getData) {
    console.log(`TokenCharttokenSymbol = ${tokenSymbol}`)
    const token_name = getData.price_list[0].name;
    console.log(`TokenChart_token_name = ${token_name}`)

    const ctx = document.getElementById('tokenChart').getContext('2d');

    const labels = getData.price_list.map(entry => entry.timestamp);  // –ú–µ—Ç–∫–∏ –æ—Å–∏ X (–≤—Ä–µ–º—è)
    const prices = getData.price_list.map(entry => entry.price);  // –î–∞–Ω–Ω—ã–µ –æ—Å–∏ Y (—Ü–µ–Ω—ã)

    if (chartInstance === null) {
        console.log("‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫!");
        chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: `${token_name} Price (USD)`,
                    data: prices,
                    borderColor: "blue",  
                    backgroundColor: "rgba(0, 0, 255, 0.1)",  
                    tension: 0.3  // ‚úÖ –î–µ–ª–∞–µ–º –ª–∏–Ω–∏–∏ –ø–ª–∞–≤–Ω—ã–º–∏
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: {
                    duration: 1000,  // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (1 —Å–µ–∫)
                    easing: 'easeInOutQuad'
                },
                scales: {
                    x: {
                        ticks: {
                            autoSkip: true,  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ª–∏—à–Ω–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å–∏ X
                            maxTicksLimit: 10
                        }
                    },
                    y: {
                        beginAtZero: false  // ‚úÖ –ì—Ä–∞—Ñ–∏–∫ –±–µ–∑ —Ä–µ–∑–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Å 0
                    }
                }
            }
        });
    } else {
        console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫...");
        chartInstance.data.labels = labels;
        chartInstance.data.datasets[0].label = `${token_name} Price (USD)`;
        chartInstance.data.datasets[0].data = prices;
        chartInstance.update();  // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
    }
}
