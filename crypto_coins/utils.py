import threading
from datetime import timedelta
from django.utils.timezone import now
from .models import CoinPrice
from .services import price_token_from_rialto  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –ø–∞—Ä—Å–µ—Ä


def round_number(number):
    if not number:
        return False
    elif number < 0:
        return round(number, 2)
    elif number < 0.001:
        return round(number, 6)
    elif number < 0.01:
        return round(number, 6)
    elif number < 0.1:
        return round(number, 5)
    elif number < 1:
        return round(number, 4)
    elif number < 10:
        return round(number, 3)
    elif number >= 10:
        return round(number, 2)
    
from django.db import connection

def get_table_size():
    with connection.cursor() as cursor:
        cursor.execute("SELECT pg_size_pretty(pg_total_relation_size('crypto_coins_coinprice'));")
        size = cursor.fetchone()
        print(size[0])

print(get_table_size())  # –í—ã–≤–µ–¥–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, '10 MB'


# ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —É–∂–µ Selenium
last_fetch_thread = None  

def start_selenium_if_needed(latest_prices):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Selenium, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏."""
    global last_fetch_thread

    if latest_prices:
        dif_time = now() - latest_prices[0].timestamp
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ utils –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏: {dif_time},{latest_prices[0].token.name}")
        if dif_time > timedelta(minutes=5):  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç 5+ –º–∏–Ω—É—Ç
            if last_fetch_thread is None or not last_fetch_thread.is_alive():
                print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Selenium –≤ —Ñ–æ–Ω–µ...")
                last_fetch_thread = threading.Thread(target=price_token_from_rialto, daemon=True)
                last_fetch_thread.start()
            else:
                print("‚ö† Selenium —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω.")
    else:
        print("‚ö† –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—É—Å–∫–∞–µ–º Selenium...")
        last_fetch_thread = threading.Thread(target=price_token_from_rialto, daemon=True)
        last_fetch_thread.start()

def price_change_percentage(back_price, now_price):
    # —Ñ—É–Ω–∫—Ü–∏—è  –¥–ª—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞ –≤ %
    z = round(100 - 100 * now_price / back_price, 2)      
    
    return z

   
