import datetime
import logging
from django.db.models import F
from django.shortcuts import render
from django.template import context


from .models import CoinPrice, Token
from django.utils.timezone import localtime, now, timedelta
from datetime import timedelta, datetime
from django.http import JsonResponse
from .utils import round_number
import threading
from .services import price_token_from_rialto
from .utils import start_selenium_if_needed


def get_latest_price_list(request,token_symbol,time_frame,period):    # ,time_frame
    tokens = Token.objects.all()
    last_all_price = []
    for token in tokens:
        latest_prices = CoinPrice.objects.filter(token=token).order_by('-timestamp')[:2]
    
        if latest_prices:
            dif = round(latest_prices[0].price - latest_prices[1].price, 2)
            last_all_price.append({"price": round_number(latest_prices[0].price), "dif": dif , "name":latest_prices[0].token.name})
        else:
            "‚ùå –û—à–∏–±–∫–∞: latest_prices –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    
    # if latest_prices:
    #     dif_time = now() - latest_prices[0].timestamp
    #     print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ views –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ : {dif_time},{latest_prices[0].token.name}")
    #     if dif_time > timedelta(minutes=5):  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç 5+ –º–∏–Ω—É—Ç
    #         start_selenium_if_needed(latest_prices)
    # –¢–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    current_time = now()
    token = Token.objects.get(symbol=token_symbol)
    # latest_prices = CoinPrice.objects.order_by('-timestamp')[:len(tokens) * 2]
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π —á–∞—Å
    # last_all_price = [{"name":p.token.name,"price": round_number(p.price)} for p in latest_prices]
    
    hourly_prices = CoinPrice.objects.filter(token=token,timestamp__gte=current_time - timedelta(hours=period)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞  days
                                                                    ).annotate(
                                                                        hour=F('timestamp__minute')  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ "—á–∞—Å"  hour
                                                                        ).order_by('-timestamp','hour')  # üî• –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ "hour"
    v_db = len(CoinPrice.objects.filter(token__symbol=token_symbol))
    
    print(f"–û–±—ä–µ–º –ë–î CoinPrice = {len(CoinPrice.objects.all())}")
    print(f"–û–±—ä–µ–º –ë–î CoinPrice —Ç–æ–∫–µ–Ω—É {token.name} = {v_db}")
    print(f"–î–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –ø–æ {token.name}  = {len(hourly_prices)}")
    # üî• –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
    # unique_hours = {}
    # time_frame = 30
    
            
    # for price in hourly_prices:
    #     # if price.hour not in unique_hours:  
    #     if price.hour % time_frame == 0 or price.hour % time_frame == 14 or price.hour % time_frame == 1 :  
    #         # unique_hours[price.hour] = True  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —á–∞—Å
    #         last_price.append(price)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # for i in range(len(hourly_prices)):
    #     if i > 0 and i < len(hourly_prices) - 1:
    #         if hourly_prices[i].hour % time_frame == 0:
    #             last_price.append(hourly_prices[i])
    #         elif hourly_prices[i].hour % time_frame != 0 and hourly_prices[i-1].hour % time_frame == 1:
    #             last_price.append(hourly_prices[i-1])
    #         elif hourly_prices[i].hour % time_frame != 0 and hourly_prices[i+1].hour % time_frame == time_frame - 1:
    #             last_price.append(hourly_prices[i+1])
    #         # elif hourly_prices[i].hour % time_frame != 0 and hourly_prices[i+1].hour % time_frame != 14 and hourly_prices[i-1].hour % time_frame == 1:
            #     last_price.append(hourly_prices[i-1])
    # i = 0            
    # while i < len(hourly_prices):
    #     if i > 0 and i < len(hourly_prices) - 1:
    #         if hourly_prices[i].hour % time_frame == 0:
    #             last_price.append(hourly_prices[i])
    #         elif hourly_prices[i].hour % time_frame != 0 and hourly_prices[i-1].hour % time_frame == 1:
    #             last_price.append(hourly_prices[i-1])
    #             i += 1
    #         elif hourly_prices[i].hour % time_frame != 0 and hourly_prices[i+1].hour % time_frame == time_frame - 1:
    #             last_price.append(hourly_prices[i+1])
    #             i += 1
    #     i += 1    
            
            
    # if hourly_prices[len(hourly_prices) - 1].hour % time_frame == 0:
    #     last_price.append(hourly_prices[len(hourly_prices) - 1])
    last_price = []
    logging.info(f"time_frame = {time_frame}") 
    if hourly_prices:
        last_price.append(hourly_prices[0])
        i = 1            
        while i < len(hourly_prices):
            if i > 1 and i < len(hourly_prices) - 1:
                if hourly_prices[i].hour != hourly_prices[i+1].hour:
                    # i += 1
                    # continue
                    if (hourly_prices[i].hour - hourly_prices[0].hour) % time_frame == 0:
                        last_price.append(hourly_prices[i])
                    elif (hourly_prices[i].hour - hourly_prices[0].hour) % time_frame != 0 and (hourly_prices[i-1].hour - hourly_prices[0].hour) % time_frame == 1:
                        last_price.append(hourly_prices[i-1])
                        i += 1
                    elif (hourly_prices[i].hour - hourly_prices[0].hour) % time_frame != 0 and (hourly_prices[i+1].hour - hourly_prices[0].hour) % time_frame == time_frame - 1:
                        last_price.append(hourly_prices[i+1])
                        i += 1
            i += 1    
    else:
        logging.info("‚ùå –í –ë–î –Ω–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö(–Ω–∞–≤–µ—Ä–Ω–æ–µ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫)")


    # logging.info(f"unique_hours= {unique_hours}")
    logging.info(f"last_price = {len(last_price)}")
    logging.info(f"last_price = {last_price}")

    # last_price = CoinPrice.objects.filter(token__symbol=token_symbol)[:25] # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 –∑–∞–ø–∏—Å–∏

    prices_with_diff = []
    if last_price:
        for i in range(len(last_price)):
            last_price[i].timestamp = localtime(last_price[i].timestamp).strftime("%d.%m.%Y %H:%M:%S")
            if i != len(last_price) - 1:
                diff = round_number(last_price[i].price) - round_number(last_price[i+1].price)  # ‚úÖ –í—ã—á–∏—Ç–∞–µ–º –∑–¥–µ—Å—å
                if diff > 0:
                    direction = '<span class="up"> &uarr;</span>'  # üîº –ö—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
                elif diff < 0:
                    direction = '<span class="down">&darr;</span>'  # üîΩ –ó–µ–ª—ë–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
                else:
                    direction = '<span class="up"> &uarr;</span>''<span class="down">&darr;</span>'  # ‚ûñ –°–µ—Ä—ã–π –ø—Ä–æ—á–µ—Ä–∫
            else:
                diff = None
                direction = '<span class="up"> &uarr;</span>''<span class="down">&darr;</span>'  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç
        
            prices_with_diff.append({"timestamp":last_price[i].timestamp,"price": round_number(last_price[i].price), "diff": diff, "direction": direction, "name":last_price[i].token.name, "hour": last_price[i].hour})
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –≤ —Å–ø–∏—Å–∫–µ last_price –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")    
    # logging.info(f"prices_with_diff = {prices_with_diff}")
    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å views.get_latest_price_list –Ω–∞ —Ñ—Ä–æ–Ω—Ç(update_list.js.then(response => response.json()))")
    return JsonResponse({"price_list": prices_with_diff if prices_with_diff else "–ù–µ—Ç —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö prices_with_diff",
                         "last_all_price": last_all_price if last_all_price else "–ù–µ—Ç —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö last_all_price"})


def token_price_with_js_view(request):
    time_frames = [["1 min","1"],["5 min","5"],["15 min","15"],["30 min","30"],["1 hour","60"]]
    time_periods = {"1 hour":"1", "12 hour":"12", "24 hour": "24"}
    periods = time_periods.items()
    url_icon = ["crypto_coins/images/ETH.png", "crypto_coins/images/BTC.png", "crypto_coins/images/SOL.png", "crypto_coins/images/STRK.png"] 
    coins = Token.objects.all()
    tokens = []
    for i in range(len(coins)):
        tokens.append({"name": coins[i].name, "symbol": coins[i].symbol, "url_icon": url_icon[i]})
    context = {
        "tokens": tokens,
        "time_frames": time_frames,
        "time_periods": periods,
    }
    return render(request, "token_price.html", context)


